commit 4caa6d080c23a1ddf9c7db789ad66743111b704d
Author: Cheng Ji <chengji@google.com>
Date:   Thu Aug 24 07:11:03 2017 +0200

    fix wrong addr family (#69)
    
    FIX: A timeout issue when both IPv4 and IPv6 are enabled.

commit f3a59328a1e862a40dd7ced99c57e9fa0a0caa2d
Author: KEBE <mail@kebe7jun.com>
Date:   Sun Aug 6 00:20:06 2017 +0800

    > fix UnicodeDecodeError using socks5 proxy. (#64)

commit 2cbe5764cf5108b0802f47b4a95ea0d3e7399baa
Author: Matt Houglum <houglum@google.com>
Date:   Wed Jun 21 10:59:14 2017 -0700

    Respect NO_PROXY env var in proxy_info_from_url(). (#58)
    
    This allows users to specify an override value for the noproxy list, in
    addition to overriding the proxy url, in proxy_info_from_url(). If no
    override is given, we should respect the values in the no_proxy/NO_PROXY
    environment variables, if present. This behavior can be seen in other
    tools like curl (see curl/curl#1140).
    
    I would also tweak this for the python3 module, but its ProxyInfo class
    doesn't even seem to have a bypass_hosts attribute.

commit 43ff2654ad4f1c90cfb44b8c9bfa9090c0d502a1
Author: Phus Lu <phuslu@hotmail.com>
Date:   Sun Apr 2 14:39:52 2017 +0800

    Bugfix for Content-Encoding: deflate
    
    Refer to https://stackoverflow.com/a/22311297
    
    zlib library supports:
    
      RFC 1950 (zlib compressed format)
      RFC 1951 (deflate compressed format)
      RFC 1952 (gzip compressed format)
    
    choosing windowBits
    
      to (de-)compress deflate format, use wbits = -zlib.MAX_WBITS
      to (de-)compress zlib format, use wbits = zlib.MAX_WBITS
      to (de-)compress gzip format, use wbits = zlib.MAX_WBITS | 16
      See documentation in http://www.zlib.net/manual.html#Advanced (section inflateInit2)
    
    Signed-off-by: Phus Lu <phuslu@hotmail.com>

---
diff --git a/python2/httplib2/__init__.py b/python2/httplib2/__init__.py
index 32ec959..1a6f31a 100644
--- a/python2/httplib2/__init__.py
+++ b/python2/httplib2/__init__.py
@@ -426,7 +426,7 @@ def _decompressContent(response, new_content):
             if encoding == 'gzip':
                 content = gzip.GzipFile(fileobj=StringIO.StringIO(new_content)).read()
             if encoding == 'deflate':
-                content = zlib.decompress(content)
+                content = zlib.decompress(content, -zlib.MAX_WBITS)
             response['content-length'] = str(len(content))
             # Record the historical presence of the encoding in a way the won't interfere.
             response['-content-encoding'] = response['content-encoding']
@@ -841,20 +841,10 @@ def proxy_info_from_environment(method='http'):
     url = os.environ.get(env_var, os.environ.get(env_var.upper()))
     if not url:
         return
-    pi = proxy_info_from_url(url, method)
+    return proxy_info_from_url(url, method, None)
 
-    no_proxy = os.environ.get('no_proxy', os.environ.get('NO_PROXY', ''))
-    bypass_hosts = []
-    if no_proxy:
-        bypass_hosts = no_proxy.split(',')
-    # special case, no_proxy=* means all hosts bypassed
-    if no_proxy == '*':
-        bypass_hosts = AllHosts
-
-    pi.bypass_hosts = bypass_hosts
-    return pi
 
-def proxy_info_from_url(url, method='http'):
+def proxy_info_from_url(url, method='http', noproxy=None):
     """
     Construct a ProxyInfo from a URL (such as http_proxy env var)
     """
@@ -881,7 +871,7 @@ def proxy_info_from_url(url, method='http'):
         port = dict(https=443, http=80)[method]
 
     proxy_type = 3 # socks.PROXY_TYPE_HTTP
-    return ProxyInfo(
+    pi = ProxyInfo(
         proxy_type = proxy_type,
         proxy_host = host,
         proxy_port = port,
@@ -890,6 +880,19 @@ def proxy_info_from_url(url, method='http'):
         proxy_headers = None,
     )
 
+    bypass_hosts = []
+    # If not given an explicit noproxy value, respect values in env vars.
+    if noproxy is None:
+        noproxy = os.environ.get('no_proxy', os.environ.get('NO_PROXY', ''))
+    # Special case: A single '*' character means all hosts should be bypassed.
+    if noproxy == '*':
+        bypass_hosts = httplib2.AllHosts
+    elif noproxy.strip():
+        bypass_hosts = noproxy.split(',')
+
+    pi.bypass_hosts = bypass_hosts
+    return pi
+
 
 class HTTPConnectionWithTimeout(httplib.HTTPConnection):
     """
@@ -942,8 +945,10 @@ class HTTPConnectionWithTimeout(httplib.HTTPConnection):
                     print "connect: (%s, %s) ************" % (self.host, self.port)
                     if use_proxy:
                         print "proxy: %s ************" % str((proxy_host, proxy_port, proxy_rdns, proxy_user, proxy_pass, proxy_headers))
-
-                self.sock.connect((self.host, self.port) + sa[2:])
+                if use_proxy:
+                    self.sock.connect((self.host, self.port) + sa[2:])
+                else:
+                    self.sock.connect(sa)
             except socket.error, msg:
                 if self.debuglevel > 0:
                     print "connect fail: (%s, %s)" % (self.host, self.port)
@@ -1062,7 +1067,11 @@ class HTTPSConnectionWithTimeout(httplib.HTTPSConnection):
 
                 if has_timeout(self.timeout):
                     sock.settimeout(self.timeout)
-                sock.connect((self.host, self.port))
+
+                if use_proxy:
+                    sock.connect((self.host, self.port) + sockaddr[:2])
+                else:
+                    sock.connect(sockaddr)
                 self.sock =_ssl_wrap_socket(
                     sock, self.key_file, self.cert_file,
                     self.disable_ssl_certificate_validation, self.ca_certs,
diff --git a/python2/httplib2/socks.py b/python2/httplib2/socks.py
index ab516ca..dbbe511 100644
--- a/python2/httplib2/socks.py
+++ b/python2/httplib2/socks.py
@@ -254,7 +254,7 @@ class socksocket(socket.socket):
             if self.__proxy[3]:
                 # Resolve remotely
                 ipaddr = None
-                req = req + chr(0x03).encode() + chr(len(destaddr)).encode() + destaddr
+                req = req + chr(0x03).encode() + chr(len(destaddr)).encode() + destaddr.encode()
             else:
                 # Resolve locally
                 ipaddr = socket.inet_aton(socket.gethostbyname(destaddr))
diff --git a/python3/httplib2/__init__.py b/python3/httplib2/__init__.py
index 0000ed9..915fd7e 100644
--- a/python3/httplib2/__init__.py
+++ b/python3/httplib2/__init__.py
@@ -334,7 +334,7 @@ def _decompressContent(response, new_content):
             if encoding == 'gzip':
                 content = gzip.GzipFile(fileobj=io.BytesIO(new_content)).read()
             if encoding == 'deflate':
-                content = zlib.decompress(content)
+                content = zlib.decompress(content, -zlib.MAX_WBITS)
             response['content-length'] = str(len(content))
             # Record the historical presence of the encoding in a way the won't interfere.
             response['-content-encoding'] = response['content-encoding']
