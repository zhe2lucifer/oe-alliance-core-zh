diff --git a/gstdvbaudiosink.c b/gstdvbaudiosink.c
old mode 100644
new mode 100755
index db0448e..3b87784
--- a/gstdvbaudiosink.c
+++ b/gstdvbaudiosink.c
@@ -585,7 +585,7 @@ static gboolean gst_dvbaudiosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 		guint8 *data;
 		gint format = 0x01;
 		gint width, depth, rate, channels, block_align, byterate;
-		self->codec_data = gst_buffer_new_and_alloc(18);
+		self->codec_data = gst_buffer_new_and_alloc(18 + 8);
 		data = GST_BUFFER_DATA(self->codec_data);
 		gst_structure_get_int(structure, "width", &width);
 		gst_structure_get_int(structure, "depth", &depth);
@@ -594,6 +594,39 @@ static gboolean gst_dvbaudiosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 		byterate = channels * rate * width / 8;
 		block_align = channels * width / 8;
 		memset(data, 0, GST_BUFFER_SIZE(self->codec_data));
+    #if 1
+		self->fixed_buffersize      = rate * 30 / 1000;
+		self->fixed_buffersize      *= channels * depth / 8;
+		self->fixed_buffertimestamp = GST_CLOCK_TIME_NONE;
+		self->fixed_bufferduration  = GST_SECOND * (GstClockTime)self->fixed_buffersize / (GstClockTime)byterate;
+        memcpy(data,"BCMA",4);
+        data[4]  = (self->fixed_buffersize & 0xFF000000) >> 24;
+        data[5]  = (self->fixed_buffersize & 0xFF0000) >> 16; 
+        data[6]  = (self->fixed_buffersize & 0xFF00) >> 8; 
+        data[7]  = (self->fixed_buffersize & 0xFF);
+		/* format tag */
+		data[8]  = format & 0xff;
+		data[9]  = (format >> 8) & 0xff;
+		/* channels */
+		data[10] = channels & 0xff;
+		data[11] = (channels >> 8) & 0xff;
+		/* sample rate */
+		data[12] = rate & 0xff;
+		data[13] = (rate >> 8) & 0xff;
+		data[14] = (rate >> 16) & 0xff;
+		data[15] = (rate >> 24) & 0xff;
+		/* byte rate */
+		data[16] = byterate & 0xff;
+		data[17] = (byterate >> 8) & 0xff;
+		data[18] = (byterate >> 16) & 0xff;
+		data[19] = (byterate >> 24) & 0xff;
+		/* block align */
+		data[20] = block_align & 0xff;
+		data[21] = (block_align >> 8) & 0xff;
+		/* word size */
+		data[22] = depth & 0xff;
+		data[23] = (depth >> 8) & 0xff;
+    #else
 		/* format tag */
 		*(data++) = format & 0xff;
 		*(data++) = (format >> 8) & 0xff;
@@ -616,10 +649,12 @@ static gboolean gst_dvbaudiosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 		/* word size */
 		*(data++) = depth & 0xff;
 		*(data++) = (depth >> 8) & 0xff;
+		
 		self->fixed_buffersize = rate * 30 / 1000;
 		self->fixed_buffersize *= channels * depth / 8;
 		self->fixed_buffertimestamp = GST_CLOCK_TIME_NONE;
 		self->fixed_bufferduration = GST_SECOND * (GstClockTime)self->fixed_buffersize / (GstClockTime)byterate;
+    #endif
 		GST_INFO_OBJECT(self, "MIMETYPE %s", type);
 		bypass = AUDIOTYPE_RAW;
 	}
diff --git a/gstdvbvideosink.c b/gstdvbvideosink.c
old mode 100644
new mode 100755
index 714899e..61a488e
--- a/gstdvbvideosink.c
+++ b/gstdvbvideosink.c
@@ -1371,6 +1371,10 @@ static gboolean gst_dvbvideosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 					guint8 *data;
 					video_codec_data_t videocodecdata;
 					gint codec_size = GST_BUFFER_SIZE(gst_value_get_buffer(codec_data));
+                #if 1     
+                    self->codec_data = gst_value_get_buffer(codec_data);   
+                    gst_buffer_ref(self->codec_data);
+                #else
 					videocodecdata.length = 8 + codec_size;
 					data = videocodecdata.data = (guint8*)g_malloc(videocodecdata.length);
 					memset(data, 0, videocodecdata.length);
@@ -1378,6 +1382,7 @@ static gboolean gst_dvbvideosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 					memcpy(data, GST_BUFFER_DATA(gst_value_get_buffer(codec_data)), codec_size);
 					ioctl(self->fd, VIDEO_SET_CODEC_DATA, &videocodecdata);
 					g_free(videocodecdata.data);
+                #endif
 				}
 			}
 			else if (self->codec_type == CT_VC1_SM)
@@ -1385,13 +1390,38 @@ static gboolean gst_dvbvideosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 				const GValue *codec_data = gst_structure_get_value(structure, "codec_data");
 				if (codec_data)
 				{
-					guint8 *data;
+				    guint8 *codec_data_pointer;
+					guint8 *data;
 					video_codec_data_t videocodecdata;
 					gint width, height;
-					gint codec_size = GST_BUFFER_SIZE(gst_value_get_buffer(codec_data));
+
+                    GstBuffer   *dest;
+                    guint8  brcm_vc1sm_sequence_header[] = 
+                    {
+                        0x00, 0x00, 0x01, 0x0F,
+                        0x00, 0x00, 0x00, 0x00,
+                        0x00, 0x00, 0x00, 0x00,
+                        0x00, 0x00, 0x00, 0x00,
+                        0x00, 0x00, 0x00,
+                    };
+
+					gint codec_size    = GST_BUFFER_SIZE(gst_value_get_buffer(codec_data));
+					codec_data_pointer = GST_BUFFER_DATA(gst_value_get_buffer(codec_data));
+					
 					if (codec_size > 4) codec_size = 4;
 					gst_structure_get_int(structure, "width", &width);
 					gst_structure_get_int(structure, "height", &height);
+            #if 1   
+                    brcm_vc1sm_sequence_header[4] = (width >> 8) & 0xff;
+                    brcm_vc1sm_sequence_header[5] = width & 0xff;
+                    brcm_vc1sm_sequence_header[6] = (height >> 8) & 0xff;
+                    brcm_vc1sm_sequence_header[7] = height & 0xff;
+                    dest = gst_buffer_new_and_alloc(sizeof(brcm_vc1sm_sequence_header));
+                    
+                    memcpy(GST_BUFFER_DATA(dest),brcm_vc1sm_sequence_header,sizeof(brcm_vc1sm_sequence_header));
+                    memcpy(GST_BUFFER_DATA(dest) + 8,codec_data_pointer,4);
+                    self->codec_data = dest;
+            #else                
 					videocodecdata.length = 33;
 					data = videocodecdata.data = (guint8*)g_malloc(videocodecdata.length);
 					memset(data, 0, videocodecdata.length);
@@ -1405,6 +1435,7 @@ static gboolean gst_dvbvideosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 					if (codec_data && codec_size) memcpy(data, GST_BUFFER_DATA(gst_value_get_buffer(codec_data)), codec_size);
 					ioctl(self->fd, VIDEO_SET_CODEC_DATA, &videocodecdata);
 					g_free(videocodecdata.data);
+            #endif
 				}
 			}
 			ioctl(self->fd, VIDEO_PLAY);
