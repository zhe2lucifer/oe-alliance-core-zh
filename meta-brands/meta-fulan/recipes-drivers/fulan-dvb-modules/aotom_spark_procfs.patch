diff --git a/e2_proc/e2_proc_main.c b/e2_proc/e2_proc_main.c
index 81881d4..4e33b90 100644
--- a/e2_proc/e2_proc_main.c
+++ b/e2_proc/e2_proc_main.c
@@ -118,6 +118,8 @@
  *  |           |
  *  |           --------- led0_pattern
  *  |           |
+ *  |           --------- led1_pattern
+ *  |           |
  *  |           --------- led_pattern_speed
  *  |           |
  *  |           |
@@ -206,6 +208,10 @@
  *  |           --------- dst_width   |
  *  |           |                     |
  *  |           --------- dst_height /
+ *  |
+ *  ---------- power
+ *  |           |
+ *  |           --------- standbyled
  *
  */
 
@@ -602,6 +608,10 @@ struct ProcStructure_s e2Proc[] =
 {
 	{cProcEntry, "progress"                                                         , NULL, NULL, NULL, NULL, ""},
 
+#if defined(SPARK) || defined(SPARK7162)
+	{cProcEntry, "vfd"                                                              , NULL, NULL, NULL, NULL, ""},
+#endif
+
 	{cProcEntry, "bus/nim_sockets"                                                  , NULL, NULL, NULL, NULL, ""},
 	{cProcDir  , "stb"                                                              , NULL, NULL, NULL, NULL, ""},
 	{cProcDir  , "stb/audio"                                                        , NULL, NULL, NULL, NULL, ""},
@@ -663,11 +673,35 @@ struct ProcStructure_s e2Proc[] =
 	{cProcEntry, "stb/fp/lnb_sense1"                                                , NULL, NULL, NULL, NULL, ""},
 	{cProcEntry, "stb/fp/lnb_sense2"                                                , NULL, NULL, NULL, NULL, ""},
 	{cProcEntry, "stb/fp/led0_pattern"                                              , NULL, NULL, default_write_proc, NULL, ""},
+	{cProcEntry, "stb/fp/led1_pattern"                                              , NULL, NULL, default_write_proc, NULL, ""},
 	{cProcEntry, "stb/fp/led_pattern_speed"                                         , NULL, NULL, default_write_proc, NULL, ""},
 	{cProcEntry, "stb/fp/version"                                                   , NULL, zero_read, NULL, NULL, ""},
 	{cProcEntry, "stb/fp/wakeup_time"                                               , NULL, wakeup_time_read, wakeup_time_write, NULL, ""},
 	{cProcEntry, "stb/fp/was_timer_wakeup"                                          , NULL, NULL, NULL, NULL, ""},
 	{cProcEntry, "stb/fp/rtc"                                                       , NULL, zero_read, default_write_proc, NULL, ""},
+	{cProcEntry, "stb/fp/rtc_offset"                                                , NULL, zero_read, default_write_proc, NULL, ""},
+#if defined(SPARK) || defined(SPARK7162)
+	{cProcEntry, "stb/fp/aotom"                                                     , NULL, NULL, NULL, NULL, ""},
+	{cProcDir  , "stb/lcd"                                                          , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/scroll_delay"                                             , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/show_symbols"                                             , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/symbol_network"                                           , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/symbol_usb"                                               , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/symbol_hdd"                                               , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/symbol_hddprogress"                                       , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/symbol_signal"                                            , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/symbol_timeshift"                                         , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/symbol_tv"                                                , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/symbol_recording"                                         , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/symbol_record_1"                                          , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/symbol_record_2"                                          , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/symbol_smartcard"                                         , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/symbol_parent_rating"                                     , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/symbol_play"                                              , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/lcd/oled_brightness"                                          , NULL, NULL, NULL, NULL, ""},
+	{cProcDir  , "stb/power"                                                        , NULL, NULL, NULL, NULL, ""},
+	{cProcEntry, "stb/power/standbyled"                                             , NULL, NULL, NULL, NULL, ""},
+#endif
 
 	{cProcDir  , "stb/tsmux"                                                        , NULL, NULL, NULL, NULL, ""},
 	{cProcEntry, "stb/tsmux/input0"                                                 , NULL, NULL, NULL, NULL, ""},
diff --git a/frontcontroller/aotom_spark/Makefile b/frontcontroller/aotom_spark/Makefile
index 52b07a8..af25f70 100644
--- a/frontcontroller/aotom_spark/Makefile
+++ b/frontcontroller/aotom_spark/Makefile
@@ -5,6 +5,7 @@ else
     aotom-objs += aotom_trace.o
     aotom-objs += aotom_i2csoft.o
     aotom-objs += aotom_vfd.o
+    aotom-objs += aotom_procfs.o
     aotom-objs += aotom_main.o
 
     obj-m += aotom.o
diff --git a/frontcontroller/aotom_spark/aotom_main.c b/frontcontroller/aotom_spark/aotom_main.c
index a9ae1c2..8a02395 100644
--- a/frontcontroller/aotom_spark/aotom_main.c
+++ b/frontcontroller/aotom_spark/aotom_main.c
@@ -5,6 +5,7 @@
  * (c) 2011 oSaoYa
  * (c) 2012-2013 Stefan Seyfried
  * (c) 2012-2013 martii
+ * (c) 2014 skl
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -53,6 +54,7 @@
 #include <linux/rtc.h>
 #include <linux/platform_device.h>
 
+#include "aotom_ywdefs.h"
 #include "aotom_main.h"
 
 static short paramDebug = 0;
@@ -74,16 +76,7 @@ static int open_count = 0;
 
 #define FRONTPANEL_MINOR_VFD    0
 
-typedef struct
-{
-	int state;
-	int period;
-	int stop;
-	struct task_struct *led_task;
-	struct semaphore led_sem;
-} tLedState;
-
-static tLedState led_state[LED_COUNT + 1];
+tLedState led_state[LED_COUNT + 1];
 static int led_count = LED_COUNT;
 
 static struct semaphore write_sem;
@@ -115,7 +108,8 @@ static struct task_struct *draw_task = 0;
 #define DRAW_THREAD_STATUS_INIT     2
 static int draw_thread_status = DRAW_THREAD_STATUS_STOPPED;
 
-static int aotomSetIcon(int which, int on);
+int aotomSetIcon(int which, int on);
+int aotomSetLed(int which, int on);
 
 int vfdlen_open(struct inode *inode, struct  file *file) {
   return single_open(file, vfdlen_show, NULL);
@@ -372,7 +366,7 @@ int vfd_init_func(void)
 	return 0;
 }
 
-static int aotomSetIcon(int which, int on)
+int aotomSetIcon(int which, int on)
 {
 	int  res = 0;
 	dprintk(5, "%s > %d, %d\n", __func__, which, on);
@@ -391,8 +385,77 @@ static int aotomSetIcon(int which, int on)
 	return res;
 }
 
+int aotomSetLed(int which, int on)
+{
+	int  res = 0;
+	dprintk(5, "%s > %d, %d\n", __func__, which, on);
+	if (which < 0 || which >= LED_COUNT)
+	{
+		printk("VFD/AOTOM led number out of range %d\n", which);
+		return -EINVAL;
+	}
+	if (led_state[which].enable) {
+		res = YWPANEL_VFD_SetLed(which,on);
+		led_state[which].state = on;
+	}
+	return res;
+}
+
+int aotomEnableLed(int which, int on)
+{
+	int  res = 0;
+	if (which < 0 || which >= LED_COUNT)
+	{
+		printk("VFD/AOTOM led number out of range %d\n", which);
+		return -EINVAL;
+	}
+	led_state[which].enable = on;
+	return res;
+}
+
+int aotomWriteText(char *buf, size_t len)
+{
+	int res = 0;
+	struct vfd_ioctl_data data;
+	if (len > sizeof(data.data))
+		data.length = sizeof(data.data);
+	else
+		data.length = len;
+	while ((data.length > 0) && (buf[data.length - 1 ] == '\n'))
+	  data.length--;
+	if (data.length > sizeof(data.data))
+		len = data.length = sizeof(data.data);
+	memcpy(data.data, buf, data.length);
+	res = run_draw_thread(&data);
+	if (res < 0)
+		return res;
+	return len;
+}
+
+int aotomSetBrightness(int level)
+{
+	int  res = 0;
+	dprintk(5, "%s > %d\n", __func__, level);
+	if (level < 0)
+		level = 0;
+	else if (level > 7)
+		level = 7;
+	res = YWPANEL_VFD_SetBrightness(level);
+	return res;
+}
+
+int aotomGetVersion()
+{
+	return panel_version.DisplayInfo;
+}
+
 /* export for later use in e2_proc */
-//EXPORT_SYMBOL(aotomSetIcon);
+EXPORT_SYMBOL(aotomSetIcon);
+EXPORT_SYMBOL(aotomSetLed);
+EXPORT_SYMBOL(aotomWriteText);
+EXPORT_SYMBOL(aotomEnableLed);
+EXPORT_SYMBOL(aotomSetBrightness);
+EXPORT_SYMBOL(aotomGetVersion);
 
 static ssize_t AOTOMdev_write(struct file *filp, const char *buff, size_t len, loff_t *off)
 {
@@ -424,7 +487,7 @@ static ssize_t AOTOMdev_write(struct file *filp, const char *buff, size_t len, l
 	return len;
 }
 
-static void flashLED(int led, int ms)
+void flashLED(int led, int ms)
 {
 	if (!led_state[led].led_task || (ms < 1 && led < LED_COUNT - 1))
 		return;
@@ -958,6 +1021,11 @@ static struct platform_driver aotom_rtc_driver =
 	},
 };
 
+extern void create_proc_fp(void);
+extern void remove_proc_fp(void);
+
+static struct class *vfd_class = 0;
+
 static int __init aotom_init_module(void)
 {
 	int i;
@@ -973,6 +1041,8 @@ static int __init aotom_init_module(void)
 		return -1;
 	if (register_chrdev(VFD_MAJOR, "VFD", &vfd_fops))
 		printk("unable to get major %d for VFD\n", VFD_MAJOR);
+	vfd_class = class_create(THIS_MODULE, "VFD");
+	device_create(vfd_class, NULL, MKDEV(VFD_MAJOR,0), NULL, "dbox!oled0");
 	sema_init(&write_sem, 1);
 	sema_init(&draw_thread_sem, 1);
 	for (i = 0; i < LED_COUNT; i++)
@@ -980,6 +1050,7 @@ static int __init aotom_init_module(void)
 		led_state[i].state = LED_OFF;
 		led_state[i].period = 0;
 		led_state[i].stop = 1;
+		led_state[i].enable = 1;
 		sema_init(&led_state[i].led_sem, 0);
 		led_state[i].led_task = kthread_run(led_thread, (void *) i, "led_thread");
 	}
@@ -1000,6 +1071,7 @@ static int __init aotom_init_module(void)
 		rtc_pdev = platform_device_register_simple(RTC_NAME, -1, NULL, 0);
 	if (IS_ERR(rtc_pdev))
 		printk(KERN_ERR "%s platform_device_register_simple failed: %ld\n", __func__, PTR_ERR(rtc_pdev));
+	create_proc_fp();
 	dprintk(5, "%s <\n", __func__);
 	proc_create("vfdlen", 0, NULL, &vfdlen_fops);
 	return 0;
@@ -1033,10 +1105,16 @@ static void __exit aotom_cleanup_module(void)
 		msleep(1);
 	dprintk(5, "[BTN] unloading ...\n");
 	button_dev_exit();
+	device_destroy(vfd_class, MKDEV(VFD_MAJOR, 0));
+	class_unregister(vfd_class);
+	class_destroy(vfd_class);
 	unregister_chrdev(VFD_MAJOR, "VFD");
 	YWPANEL_VFD_Term();
 	remove_proc_entry("vfdlen", NULL);
 	printk("Fulan front panel module unloading\n");
+
+	remove_proc_fp();
+
 }
 
 module_init(aotom_init_module);
diff --git a/frontcontroller/aotom_spark/aotom_main.h b/frontcontroller/aotom_spark/aotom_main.h
index f57628d..f15f1a2 100644
--- a/frontcontroller/aotom_spark/aotom_main.h
+++ b/frontcontroller/aotom_spark/aotom_main.h
@@ -225,6 +225,16 @@ typedef struct YWPANEL_I2CData_s
 
 } YWPANEL_I2CData_t;
 
+typedef struct
+{
+	int state;
+	int period;
+	int stop;
+	int enable;
+	struct task_struct *led_task;
+	struct semaphore led_sem;
+} tLedState;
+
 typedef enum YWPANEL_DataType_e
 {
 	YWPANEL_DATATYPE_LBD = 0x01,
@@ -630,6 +640,7 @@ extern u8(*YWPANEL_VFD_ScanKeyboard)(void);
 extern int (*YWPANEL_VFD_ShowString)(char *);
 
 extern int YWPANEL_width;
+extern tLedState led_state[LED_COUNT + 1];
 
 YWPANEL_VFDSTATE_t YWPANEL_FP_GetVFDStatus(void);
 int YWPANEL_FP_SetVFDStatus(YWPANEL_VFDSTATE_t state);
diff --git a/frontcontroller/aotom_spark/aotom_procfs.c b/frontcontroller/aotom_spark/aotom_procfs.c
new file mode 100644
index 0000000..931caab
--- /dev/null
+++ b/frontcontroller/aotom_spark/aotom_procfs.c
@@ -0,0 +1,760 @@
+/*
+ * aotom_procfs.c
+ *
+ * (c) 2014 skl
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ *
+ */
+
+
+#include <linux/proc_fs.h>      /* proc fs */
+#include <asm/uaccess.h>        /* copy_from_user */
+#include <linux/time.h>
+#include <linux/kernel.h>
+#include "aotom_main.h"
+
+/*
+/proc/stb/fp/aotom_led", "w"
+/proc/stb/fp/aotom_icon", "w"
+*/
+/*
+ *  /proc/
+ *             |
+ *             +--- vfd (w)
+ "             +--- progress (rw)
+ *  /proc/stb/fp
+ *             |
+ *             +--- aotom (w)
+ *             |
+ *             +--- version (r)
+ *             |
+ *             +--- rtc (w)
+ *             |
+ *             +--- rtc_offset (w)
+ *             |
+ *             +--- wakeup_time (rw)
+ *             |
+ *             +--- was_timer_wakeup (rw)
+ *             |
+ *             +--- led0_pattern (w)
+ *             |
+ *             +--- led1_pattern (w)
+ *  /proc/stb/lcd
+ *             |
+ *             +--- scroll_delay (w)
+ *             |
+ *             +--- show_symbols (w)
+ *             |
+ *             +--- symbol_network (w)
+ *             |
+ *             +--- symbol_usb (w)
+ *             |
+ *             +--- symbol_hdd (w)
+ *             |
+ *             +--- symbol_hddprogress (w)
+ *             |
+ *             +--- symbol_signal (w)
+ *             |
+ *             +--- symbol_timeshift (w)
+ *             |
+ *             +--- symbol_tv (w)
+ *             |
+ *             +--- symbol_recording (w)
+ *             |
+ *             +--- symbol_record_1 (w)
+ *             |
+ *             +--- symbol_record_2 (w)
+ *             |
+ *             +--- symbol_smartcard (w)
+ *             |
+ *             +--- symbol_parent_rating (w)
+ *             |
+ *             +--- symbol_play (w)
+ *             |
+ *             +--- oled_brightness (w)
+ *  /proc/stb/power/
+ *             |
+ *             +--- standbyled (w)
+*/
+
+extern int install_e2_procs(char *name, read_proc_t *read_proc, write_proc_t *write_proc, void *data);
+extern int remove_e2_procs(char *name, read_proc_t *read_proc, write_proc_t *write_proc);
+
+extern int aotomSetIcon(int which, int on);
+extern int aotomSetLed(int which, int on);
+extern int aotomEnableLed(int which, int on);
+extern int aotomWriteText(char *buf, size_t len);
+extern int aotomSetBrightness(int level);
+extern int aotomGetVersion();
+extern void flashLED(int led, int ms);
+
+static int rtc_offset = 0;
+static u32 wakeup_time = 0;
+static int progress = 0;
+
+static int vfd_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  int value;
+  int ret = -ENOMEM;
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      ret = aotomWriteText(page, count);
+    }
+    free_page((unsigned long)page);
+  }
+  return ret;
+}
+
+static int progress_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+	char* page;
+	char* myString;
+	ssize_t ret = -ENOMEM;
+	page = (char*)__get_free_page(GFP_KERNEL);
+	if (page)
+	{
+		ret = -EFAULT;
+		if (copy_from_user(page, buf, count))
+			goto out;
+		myString = (char*) kmalloc(count+1, GFP_KERNEL);
+		strncpy(myString, page, count);
+		myString[count] = '\0';
+		sscanf(myString, "%d", &progress);
+		kfree(myString);
+		if (aotomGetVersion() != YWPANEL_FP_DISPTYPE_LED) {
+			myString = (char*) kmalloc(count+6, GFP_KERNEL);
+			if (myString) {
+				strcpy(myString, "Load ");
+				strncat(myString, page, count);
+				aotomWriteText(myString, (count+6) < 8 ? (count+6) : 8);
+				kfree(myString);
+			}
+			if (aotomGetVersion() == YWPANEL_FP_DISPTYPE_VFD) {
+				if ((progress > 0) && (progress <= 98) && (led_state[LED_SPINNER].period == 0))
+					flashLED(LED_SPINNER, 200); // start spinner
+				if ((progress > 98) && (led_state[LED_SPINNER].period > 0))
+					flashLED(LED_SPINNER, 0); // stop spinner
+			}
+		}
+		else {
+			aotomWriteText(page, count);
+		}
+	}
+	ret = count;
+out:
+	free_page((unsigned long)page);
+	return ret;
+}
+
+static int progress_read(char *page, char **start, off_t off, int count, int *eof, void *data) {
+	int len = 0;
+	if(NULL != page)
+		len = sprintf(page,"%d\n", progress);
+	return len;
+}
+
+// Proc for accessing quick control of aotom
+// String format: fxy
+// f is "l" (for led) or "i" (for icons)
+// x is 0/1 and indicates if the led/icon must be off or on
+// y is the led/icon number (between 0 and LED_COUNT-1 for leds; between 1 and 46, for icons, with y==46, all the icons are set)
+static int aotom_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  int value;
+  int ret = -ENOMEM;
+
+  printk("%s(%ld, ", __FUNCTION__, count);
+
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      page[count] = '\0';
+      printk("%s", page);
+
+      if (count>3) {
+        value = (int)simple_strtol(page+2, NULL, 10);
+        if (page[0] == 'l') {
+          if (page[1] == '0') {
+            if ((value>=0)&&(value<LED_COUNT)) aotomSetLed(value,0);
+          }
+          else if (page[1] == '1') {
+            if ((value>=0)&&(value<LED_COUNT)) aotomSetLed(value,1);
+          }
+        }
+        else if (page[0] == 'i') {
+          if (page[1] == '0') {
+            if ((value>=1)&&(value<=46)) aotomSetIcon(value,0);
+          }
+          else if (page[1] == '1') {
+            if ((value>=1)&&(value<=46)) aotomSetIcon(value,1);
+          }
+        }
+      }
+
+      ret = count;
+    }
+    free_page((unsigned long)page);
+  }
+  printk(")\n");
+
+  return ret;
+}
+
+static int aotom_read_rtc(char *page, char **start, off_t off, int count, int *eof, void *data) {
+	int len = 0;
+	u32 rtc_time = YWPANEL_FP_GetTime();
+	if(NULL != page)
+	{
+		/* AOTOM needs time in local time so deduct rtc_offset for e2 */
+		len = sprintf(page,"%u\n", rtc_time-rtc_offset);
+	}
+	return len;
+}
+
+static int aotom_write_rtc(struct file *file, const char __user *buffer, unsigned long count, void *data) {
+	char *page = NULL;
+	ssize_t ret = -ENOMEM;
+	u32 argument = 0;
+	int test = -1;
+	char *myString = kmalloc(count + 1, GFP_KERNEL);
+	printk("%s %ld - ", __FUNCTION__, count);
+	page = (char *)__get_free_page(GFP_KERNEL);
+	if (page)
+	{
+		ret = -EFAULT;
+		if (copy_from_user(page, buffer, count))
+			goto out;
+		strncpy(myString, page, count);
+		myString[count] = '\0';
+		printk("%s -> %s\n",__FUNCTION__, myString);
+		test = sscanf (myString,"%u",&argument);
+		if(0 < test)
+		{
+			/* AOTOM needs time in local time so add rtc_offset for time from e2 */
+			YWPANEL_FP_SetTime(argument+rtc_offset);
+			YWPANEL_FP_ControlTimer(true);
+		}
+		/* always return count to avoid endless loop */
+		ret = count;
+	}
+out:
+	free_page((unsigned long)page);
+	kfree(myString);
+	return ret;
+}
+
+static int aotom_read_rtc_offset(char *page, char **start, off_t off, int count, int *eof, void *data) {
+	int len = 0;
+	if(NULL != page)
+		len = sprintf(page,"%d\n", rtc_offset);
+	return len;
+}
+
+static int aotom_write_rtc_offset(struct file *file, const char __user *buffer, unsigned long count, void *data) {
+	char *page = NULL;
+	ssize_t ret = -ENOMEM;
+	int test = -1;
+	u32 rtc_time;
+	char *myString = kmalloc(count + 1, GFP_KERNEL);
+	printk("%s %ld - ", __FUNCTION__, count);
+	page = (char *)__get_free_page(GFP_KERNEL);
+	if (page)
+	{
+		ret = -EFAULT;
+		if (copy_from_user(page, buffer, count))
+			goto out;
+		strncpy(myString, page, count);
+		myString[count] = '\0';
+		printk("%s -> %s\n",__FUNCTION__, myString);
+		rtc_time = YWPANEL_FP_GetTime()-rtc_offset;
+		test = sscanf (myString,"%d",&rtc_offset);
+		// Update time with new offset
+		YWPANEL_FP_SetTime(rtc_time+rtc_offset);
+		YWPANEL_FP_ControlTimer(true);
+		printk(" offset: %d\n",rtc_offset);
+		/* always return count to avoid endless loop */
+		ret = count;
+	}
+out:
+	free_page((unsigned long)page);
+	kfree(myString);
+	return ret;
+}
+
+static int wakeup_time_write(struct file *file, const char __user *buffer, unsigned long count, void *data) {
+	char *page = NULL;
+	ssize_t ret = -ENOMEM;
+	int test = -1;
+	char *myString = kmalloc(count + 1, GFP_KERNEL);
+	printk("%s %ld - ", __FUNCTION__, count);
+	page = (char *)__get_free_page(GFP_KERNEL);
+	if (page)
+	{
+		ret = -EFAULT;
+		if (copy_from_user(page, buffer, count))
+			goto out;
+		strncpy(myString, page, count);
+		myString[count] = '\0';
+		printk("%s -> %s\n",__FUNCTION__, myString);
+		test = sscanf (myString,"%u",&wakeup_time);
+		if(0 < test)
+		{
+			/* AOTOM needs time in local time so add rtc_offset for time from e2 */
+			YWPANEL_FP_SetPowerOnTime(wakeup_time+rtc_offset);
+		}
+		/* always return count to avoid endless loop */
+		ret = count;
+	}
+out:
+	free_page((unsigned long)page);
+	kfree(myString);
+	return ret;
+}
+
+static int wakeup_time_read(char *page, char **start, off_t off, int count, int *eof, void *data) {
+	int len = 0;
+	if(NULL != page)
+	{
+		/* AOTOM needs time in local time so deduct rtc_offset for e2 */
+		len = sprintf(page,"%u\n", wakeup_time-rtc_offset);
+	}
+	return len;
+}
+
+static int was_timer_wakeup_read(char *page, char **start, off_t off, int count, int *eof, void *data) {
+	int len = 0;
+	int res = 0;
+	YWPANEL_STARTUPSTATE_t State;
+	if(NULL != page)
+	{
+		YWPANEL_FP_GetStartUpState(&State);
+		if (State==YWPANEL_STARTUPSTATE_TIMER) res=1;
+		len = sprintf(page,"%d\n", res);
+	}
+	return len;
+}
+
+static int fp_version_read(char *page, char **start, off_t off, int count,
+                          int *eof, void *data_unused)
+{
+  int len = 0;
+  len = sprintf(page, "%d\n", aotomGetVersion());
+  return len;
+}
+
+static int lcd_symbol_usb_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  long value;
+  int ret = -ENOMEM;
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      page[count] = '\0';
+      value = simple_strtol(page, NULL, 0);
+      if (value == 0) aotomSetIcon(13,0);
+      else if (value == 1) aotomSetIcon(13,1);
+      ret = count;
+    }
+    free_page((unsigned long)page);
+  }
+  return ret;
+}
+
+static int lcd_symbol_hdd_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  long value;
+  int ret = -ENOMEM;
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      page[count] = '\0';
+      value = simple_strtol(page, NULL, 0);
+      if (value == 0) aotomSetIcon(30,0);
+      else if (value == 1) aotomSetIcon(30,1);
+      ret = count;
+    }
+    free_page((unsigned long)page);
+  }
+  return ret;
+}
+
+static int lcd_symbol_hddprogress_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  long value;
+  int ret = -ENOMEM;
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      page[count] = '\0';
+      value = simple_strtol(page, NULL, 0);
+      if (value == 0) aotomSetIcon(22,0);
+      else if (value == 1) aotomSetIcon(22,1);
+      ret = count;
+    }
+    free_page((unsigned long)page);
+  }
+  return ret;
+}
+
+static int lcd_symbol_signal_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  long value;
+  int ret = -ENOMEM;
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      page[count] = '\0';
+      value = simple_strtol(page, NULL, 0);
+      if (value == 0) aotomSetIcon(42,0);
+      else if (value == 1) aotomSetIcon(42,1);
+      ret = count;
+    }
+    free_page((unsigned long)page);
+  }
+  return ret;
+}
+
+static int lcd_symbol_timeshift_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  long value;
+  int ret = -ENOMEM;
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      page[count] = '\0';
+      value = simple_strtol(page, NULL, 0);
+      if (value == 0) aotomSetIcon(43,0);
+      else if (value == 1) aotomSetIcon(43,1);
+      ret = count;
+    }
+    free_page((unsigned long)page);
+  }
+  return ret;
+}
+
+static int lcd_symbol_tv_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  long value;
+  int ret = -ENOMEM;
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      page[count] = '\0';
+      value = simple_strtol(page, NULL, 0);
+      if (value == 0) aotomSetIcon(27,0);
+      else if (value == 1) aotomSetIcon(27,1);
+      ret = count;
+    }
+    free_page((unsigned long)page);
+  }
+  return ret;
+}
+
+static int lcd_symbol_record_1_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  long value;
+  int ret = -ENOMEM;
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      page[count] = '\0';
+      value = simple_strtol(page, NULL, 0);
+      if (value == 0) aotomSetIcon(7,0);
+      else if (value == 1) aotomSetIcon(7,1);
+      ret = count;
+    }
+    free_page((unsigned long)page);
+  }
+  return ret;
+}
+
+static int lcd_symbol_record_2_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  long value;
+  int ret = -ENOMEM;
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      page[count] = '\0';
+      value = simple_strtol(page, NULL, 0);
+      if (value == 0) aotomSetIcon(15,0);
+      else if (value == 1) aotomSetIcon(15,1);
+      ret = count;
+    }
+    free_page((unsigned long)page);
+  }
+  return ret;
+}
+
+static int lcd_symbol_smartcard_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  long value;
+  int ret = -ENOMEM;
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      page[count] = '\0';
+      value = simple_strtol(page, NULL, 0);
+      if (value == 0) aotomSetIcon(11,0);
+      else if (value == 1) aotomSetIcon(11,1);
+      ret = count;
+    }
+    free_page((unsigned long)page);
+  }
+  return ret;
+}
+
+static int lcd_symbol_play_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  long value;
+  int ret = -ENOMEM;
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      page[count] = '\0';
+      value = simple_strtol(page, NULL, 0);
+      if (value == 0) aotomSetIcon(3,0);
+      else if (value == 1) aotomSetIcon(3,1);
+      ret = count;
+    }
+    free_page((unsigned long)page);
+  }
+  return ret;
+}
+
+static int led0_pattern_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  long value;
+  int ret = -ENOMEM;
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      page[count] = '\0';
+      value = simple_strtol(page, NULL, 16);
+      if (value==0) aotomSetLed(0,0);
+      else if (value==0xffffffff) aotomSetLed(0,1);
+      ret = count;
+    }
+    free_page((unsigned long)page);
+  }
+  return ret;
+}
+
+static int led1_pattern_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  long value;
+  int ret = -ENOMEM;
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      page[count] = '\0';
+      value = simple_strtol(page, NULL, 16);
+      if (value==0) aotomSetLed(1,0);
+      else if (value==0xffffffff) aotomSetLed(1,1);
+      ret = count;
+    }
+    free_page((unsigned long)page);
+  }
+  return ret;
+}
+
+static int lcd_oled_brightness_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  long level;
+  int ret = -ENOMEM;
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      page[count] = '\0';
+      level = simple_strtol(page, NULL, 10);
+      aotomSetBrightness((int)level);
+      ret = count;
+    }
+    free_page((unsigned long)page);
+  }
+  return ret;
+}
+
+static int power_standbyled_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  char *page;
+  int ret = -ENOMEM;
+
+  printk("%s(%ld, ", __FUNCTION__, count);
+
+  page = (char *)__get_free_page(GFP_KERNEL);
+  if (page)
+  {
+    ret = -EFAULT;
+    if (copy_from_user(page, buf, count) == 0)
+    {
+      page[count] = '\0';
+
+      printk("%s", page);
+
+      if (strcmp(page,"on")==0) {
+        aotomEnableLed(0,1);
+        printk("on");
+      }
+      else if (strcmp(page,"off")==0) {
+        aotomEnableLed(0,0);
+        printk("off");
+      }
+      ret = count;
+    }
+    free_page((unsigned long)page);
+  }
+  return ret;
+}
+
+static int null_write(struct file *file, const char __user *buf,
+                           unsigned long count, void *data)
+{
+  return count;
+}
+
+struct fp_procs
+{
+  char *name;
+  read_proc_t *read_proc;
+  write_proc_t *write_proc;
+} fp_procs[] =
+{
+  { "vfd", NULL, vfd_write },
+  { "progress", progress_read, progress_write },
+  { "stb/fp/rtc", aotom_read_rtc, aotom_write_rtc },
+  { "stb/fp/rtc_offset", aotom_read_rtc_offset, aotom_write_rtc_offset },
+  { "stb/fp/aotom", NULL, aotom_write },
+  { "stb/fp/led0_pattern", NULL, led0_pattern_write },
+  { "stb/fp/led1_pattern", NULL, led1_pattern_write },
+  { "stb/fp/wakeup_time", wakeup_time_read, wakeup_time_write },
+  { "stb/fp/was_timer_wakeup", was_timer_wakeup_read, null_write },
+  { "stb/fp/version", fp_version_read, NULL },
+  { "stb/power/standbyled", NULL, power_standbyled_write },
+  { "stb/lcd/scroll_delay", NULL, null_write },
+  { "stb/lcd/show_symbols", NULL, null_write },
+  { "stb/lcd/symbol_network", NULL, null_write },
+  { "stb/lcd/symbol_usb", NULL, lcd_symbol_usb_write },
+  { "stb/lcd/symbol_hdd", NULL, lcd_symbol_hdd_write },
+  { "stb/lcd/symbol_hddprogress", NULL, lcd_symbol_hddprogress_write },
+  { "stb/lcd/symbol_signal", NULL, lcd_symbol_signal_write },
+  { "stb/lcd/symbol_timeshift", NULL, lcd_symbol_timeshift_write },
+  { "stb/lcd/symbol_tv", NULL, lcd_symbol_tv_write },
+  { "stb/lcd/symbol_recording", NULL, null_write },
+  { "stb/lcd/symbol_record_1", NULL, lcd_symbol_record_1_write },
+  { "stb/lcd/symbol_record_2", NULL, lcd_symbol_record_2_write },
+  { "stb/lcd/symbol_smartcard", NULL, lcd_symbol_smartcard_write },
+  { "stb/lcd/symbol_parent_rating", NULL, null_write },
+  { "stb/lcd/symbol_play", NULL, lcd_symbol_play_write },
+  { "stb/lcd/oled_brightness", NULL, lcd_oled_brightness_write },
+};
+
+void create_proc_fp(void)
+{
+  int i;
+  for(i = 0; i < sizeof(fp_procs)/sizeof(fp_procs[0]); i++)
+  {
+    install_e2_procs(fp_procs[i].name, fp_procs[i].read_proc, fp_procs[i].write_proc, NULL);
+  }
+}
+
+void remove_proc_fp(void)
+{
+  int i;
+  for(i = sizeof(fp_procs)/sizeof(fp_procs[0]) - 1; i >= 0; i--)
+  {
+    remove_e2_procs(fp_procs[i].name, fp_procs[i].read_proc, fp_procs[i].write_proc);
+  }
+}
+
