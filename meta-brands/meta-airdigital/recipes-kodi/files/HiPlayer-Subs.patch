diff --git a/xbmc/windows/GUIWindowSubtitles.cpp b/xbmc/windows/GUIWindowSubtitles.cpp
new file mode 100644
index 0000000000..b7195a2da6
--- /dev/null
+++ b/xbmc/windows/GUIWindowSubtitles.cpp
@@ -0,0 +1,167 @@
+#include "GUIWindowSubtitles.h"
+#include "utils/log.h"
+#include "guilib/GUIFontManager.h"
+#include "guilib/GUITextLayout.h"
+#include "guilib/GUIWindowManager.h"
+#include "settings/Settings.h"
+#include "utils/StringUtils.h"
+
+
+static color_t colors[8] = {
+0xFFFFFF00
+, 0xFFFFFFFF
+, 0xFF0099FF
+, 0xFF00FF00
+, 0xFFCCFF00
+, 0xFF00FFFF
+, 0xFFE5E5E5
+, 0xFFC0C0C0
+};
+
+
+CGUIWindowSubtitles::CGUIWindowSubtitles(void)
+  : CGUIDialog(12666, "", DialogModalityType::MODELESS)
+{
+	m_needsScaling = false;
+	m_layout = nullptr;
+	m_renderOrder = RENDER_ORDER_WINDOW_DEBUG;
+	Open();
+}
+
+CGUIWindowSubtitles::~CGUIWindowSubtitles(void)
+{
+}
+
+void CGUIWindowSubtitles::UpdateVisibility()
+{
+	Open();
+}
+
+bool CGUIWindowSubtitles::OnMessage(CGUIMessage &message)
+{
+	if (message.GetMessage() == GUI_MSG_WINDOW_DEINIT)
+	{
+		delete m_layout;
+		m_layout = nullptr;
+	}
+	if (message.GetMessage() == GUI_MSG_SET_TEXT)
+	{
+		m_text = StringUtils::Format("[COLOR %08x]%s[/COLOR]", colors[CSettings::GetInstance().GetInt(CSettings::SETTING_SUBTITLES_COLOR)], message.GetLabel().c_str());
+
+		// Avoid additional line breaks
+		while(StringUtils::EndsWith(m_text, "\n"))
+		m_text = StringUtils::Left(m_text, m_text.length() - 1);
+
+		// Remove HTML-like tags from the subtitles until
+		StringUtils::Replace(m_text, "\\r", "");
+		StringUtils::Replace(m_text, "\r", "");
+		StringUtils::Replace(m_text, "\\n", "[CR]");
+		StringUtils::Replace(m_text, "\n", "[CR]");
+		StringUtils::Replace(m_text, "<br>", "[CR]");
+		StringUtils::Replace(m_text, "\\N", "[CR]");
+		StringUtils::Replace(m_text, "<i>", "[I]");
+		StringUtils::Replace(m_text, "</i>", "[/I]");
+		StringUtils::Replace(m_text, "<b>", "[B]");
+		StringUtils::Replace(m_text, "</b>", "[/B]");
+		StringUtils::Replace(m_text, "<u>", "");
+		StringUtils::Replace(m_text, "<p>", "");
+		StringUtils::Replace(m_text, "<P>", "");
+		StringUtils::Replace(m_text, "&nbsp;", "");
+		StringUtils::Replace(m_text, "</u>", "");
+		StringUtils::Replace(m_text, "</i", "[/I]"); // handle tags which aren't closed properly (happens).
+		StringUtils::Replace(m_text, "</b", "[/B]");
+		StringUtils::Replace(m_text, "</u", "");
+
+		m_subalign = CSettings::GetInstance().GetInt(CSettings::SETTING_SUBTITLES_ALIGN);
+		if (m_subalign == SUBTITLE_ALIGN_MANUAL)
+		{
+			m_align  = ALIGN_SUBTITLE;
+			m_pos    = POSITION_RELATIVE;
+			m_x      = 0.0f;
+			m_y      = 0.0f;
+		}
+		else
+		{
+			if(m_subalign == SUBTITLE_ALIGN_TOP_INSIDE ||
+				m_subalign == SUBTITLE_ALIGN_BOTTOM_INSIDE)
+				m_align  = ALIGN_VIDEO;
+			else
+				m_align = ALIGN_SCREEN;
+
+			m_pos    = POSITION_RELATIVE;
+			m_x      = 0.5f;
+
+			if(m_subalign == SUBTITLE_ALIGN_TOP_INSIDE ||
+				m_subalign == SUBTITLE_ALIGN_TOP_OUTSIDE)
+				m_y    = 0.0f;
+			else
+				m_y    = 1.0f;
+		}
+		m_width  = 0;
+		m_height = 0;
+
+		m_type = TYPE_GUITEXT;
+
+		m_layout = nullptr;
+	}
+	return CGUIDialog::OnMessage(message);
+}
+
+void CGUIWindowSubtitles::Process(unsigned int currentTime, CDirtyRegionList &dirtyregions)
+{
+	RESOLUTION_INFO res = g_graphicsContext.GetResInfo();
+	g_graphicsContext.SetRenderingResolution(res, true);
+
+	if (!m_layout)
+	{
+		RESOLUTION_INFO pal(720, 576, 0);
+		CGUIFont *subtitle_font = g_fontManager.LoadTTF(StringUtils::Format("__subs%d%x%x__", 
+			CSettings::GetInstance().GetInt(CSettings::SETTING_SUBTITLES_HEIGHT),
+			CSettings::GetInstance().GetInt(CSettings::SETTING_SUBTITLES_COLOR), CSettings::GetInstance().GetInt(CSettings::SETTING_SUBTITLES_STYLE))
+			, CSettings::GetInstance().GetString(CSettings::SETTING_SUBTITLES_FONT)
+			, colors[CSettings::GetInstance().GetInt(CSettings::SETTING_SUBTITLES_COLOR)]
+			, 0
+			, CSettings::GetInstance().GetInt(CSettings::SETTING_SUBTITLES_HEIGHT)
+			, CSettings::GetInstance().GetInt(CSettings::SETTING_SUBTITLES_STYLE)
+			, false, 1.0f, 1.0f, &pal, true);
+		CGUIFont *border_font   = g_fontManager.LoadTTF(StringUtils::Format("__subsborder%d%x%x__", 
+			CSettings::GetInstance().GetInt(CSettings::SETTING_SUBTITLES_HEIGHT),
+			CSettings::GetInstance().GetInt(CSettings::SETTING_SUBTITLES_COLOR), CSettings::GetInstance().GetInt(CSettings::SETTING_SUBTITLES_STYLE))
+			, CSettings::GetInstance().GetString(CSettings::SETTING_SUBTITLES_FONT)
+			, 0xFF000000
+			, 0
+			, CSettings::GetInstance().GetInt(CSettings::SETTING_SUBTITLES_HEIGHT)
+			, CSettings::GetInstance().GetInt(CSettings::SETTING_SUBTITLES_STYLE)
+			, true, 1.0f, 1.0f, &pal, true);
+		if (subtitle_font && border_font)
+			m_layout = new CGUITextLayout(subtitle_font, true, 0, border_font);
+	}
+	if (!m_layout)
+		return;
+
+	if (g_windowManager.GetActiveWindow() != WINDOW_FULLSCREEN_VIDEO)
+	{
+		m_text.clear();
+	}
+
+	RESOLUTION_INFO info = g_graphicsContext.GetResInfo();
+	float width_max = (float)res.Overscan.right - res.Overscan.left;
+	float w, h;
+	if (m_layout->Update(m_text, width_max * 0.9f, false, true))
+		MarkDirtyRegion();
+	m_layout->GetTextExtent(w, h);
+
+	float y = (float)info.iSubtitles - h;
+	m_renderRegion.SetRect((g_graphicsContext.GetWidth() / 2), y, (g_graphicsContext.GetWidth() / 2) + w, y + h);
+}
+
+void CGUIWindowSubtitles::Render()
+{
+	g_graphicsContext.SetRenderingResolution(g_graphicsContext.GetResInfo(), false);
+	if (m_layout)
+	{
+		RESOLUTION_INFO res = g_graphicsContext.GetResInfo();
+		float width_max = (float)res.Overscan.right - res.Overscan.left;
+		m_layout->RenderOutline(m_renderRegion.x1, m_renderRegion.y1, 0xffffffff, 0xff000000, XBFONT_CENTER_X, width_max);
+	}
+}
diff --git a/xbmc/windows/GUIWindowSubtitles.h b/xbmc/windows/GUIWindowSubtitles.h
new file mode 100644
index 0000000000..10611cb247
--- /dev/null
+++ b/xbmc/windows/GUIWindowSubtitles.h
@@ -0,0 +1,53 @@
+#include "guilib/GUIDialog.h"
+#include "guilib/GUIFont.h"
+
+class CGUITextLayout;
+
+enum SubtitleAlign
+{
+	SUBTITLE_ALIGN_MANUAL         = 0,
+	SUBTITLE_ALIGN_BOTTOM_INSIDE,
+	SUBTITLE_ALIGN_BOTTOM_OUTSIDE,
+	SUBTITLE_ALIGN_TOP_INSIDE,
+	SUBTITLE_ALIGN_TOP_OUTSIDE
+};
+
+class CGUIWindowSubtitles : public CGUIDialog
+{
+public:
+	CGUIWindowSubtitles();
+	virtual ~CGUIWindowSubtitles();
+	virtual void Process(unsigned int currentTime, CDirtyRegionList &dirtyregions);
+	virtual void Render();
+	virtual bool OnMessage(CGUIMessage &message);
+protected:
+	virtual void UpdateVisibility();
+private:
+	CGUITextLayout *m_layout;
+	CGUIFont *m_font;
+	std::string m_text;
+	int m_subalign;
+
+	enum EType
+	{ TYPE_NONE
+	, TYPE_TEXTURE
+	, TYPE_GUITEXT
+	} m_type;
+
+	enum EAlign
+	{ ALIGN_SCREEN
+	, ALIGN_VIDEO
+	, ALIGN_SUBTITLE
+	} m_align;
+
+	enum EPosition
+	{ POSITION_ABSOLUTE
+	, POSITION_ABSOLUTE_SCREEN
+	, POSITION_RELATIVE
+	} m_pos;
+
+	float m_x;
+	float m_y;
+	float m_width;
+	float m_height;
+};
-- 
2.17.1

