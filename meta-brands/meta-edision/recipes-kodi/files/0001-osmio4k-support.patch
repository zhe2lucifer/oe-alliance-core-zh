From a5a8cfd3343c40a4c75bdf6ab7132f237b7c9e23 Mon Sep 17 00:00:00 2001
From: Taejong Yoo <yoo.taejong@gmail.com>
Date: Wed, 31 Oct 2018 20:47:44 +0900
Subject: [PATCH] osmio4k support

---
 configure.ac                                |  14 +++
 m4/xbmc_arch.m4                             |   4 +
 xbmc/utils/CPUInfo.cpp                      |   4 +
 xbmc/windowing/egl/EGLNativeTypeEdision.cpp | 176 ++++++++++++++++++++++++++++
 xbmc/windowing/egl/EGLNativeTypeEdision.h   |  61 ++++++++++
 xbmc/windowing/egl/EGLWrapper.cpp           |   5 +
 xbmc/windowing/egl/Makefile.in              |   3 +
 xbmc/windowing/egl/WinSystemEGL.cpp         |   4 +-
 8 files changed, 269 insertions(+), 2 deletions(-)
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeEdision.cpp
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeEdision.h

diff --git a/configure.ac b/configure.ac
index 1a5000c..0712d32 100644
--- a/configure.ac
+++ b/configure.ac
@@ -743,6 +743,13 @@ case $use_platform in
      use_gles=yes
      use_sdl=no
      ;;
+  edision-aarch64)
+     USE_EDISION=1
+     target_platform=target_v3d
+     target_videoplatform=target_edision
+     use_gles=yes
+     use_sdl=no
+     ;;
   nextv-cortexa15)
      USE_NEXTV=1
      target_platform=target_v3d
@@ -1076,6 +1083,12 @@ if test "$use_gles" = "yes"; then
       AC_DEFINE(HAS_EGLGLES, [1], [Define if supporting EGL based GLES Framebuffer])
       AC_MSG_RESULT(== WARNING: OpenGLES xcore support is assumed.)
       LIBS="$LIBS -lEGL -lGLESv2 -lv3dplatform"
+  elif test "$target_videoplatform" = "target_edision" ; then
+      AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
+      AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
+      AC_DEFINE(HAS_EGLGLES, [1], [Define if supporting EGL based GLES Framebuffer])
+      AC_MSG_RESULT(== WARNING: OpenGLES edision support is assumed.)
+      LIBS="$LIBS -lEGL -lGLESv2 -lv3dplatform"
   elif test "$target_videoplatform" = "target_nextv" ; then
       AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
       AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
@@ -2537,6 +2550,7 @@ AC_SUBST(USE_OPTICAL_DRIVE)
 AC_SUBST(USE_V3DNXPL)
 AC_SUBST(USE_DREAMBOX)
 AC_SUBST(USE_XCORE)
+AC_SUBST(USE_EDISION)
 AC_SUBST(USE_VUPLUS)
 AC_SUBST(USE_VUPLUS_ARM_LIB)
 AC_SUBST(USE_VUPLUS_MIPSEL_LIB)
diff --git a/m4/xbmc_arch.m4 b/m4/xbmc_arch.m4
index d63ba7c..73c5dba 100644
--- a/m4/xbmc_arch.m4
+++ b/m4/xbmc_arch.m4
@@ -87,6 +87,10 @@ if test "$target_videoplatform" = "target_xcore" ; then
   AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_STB -DTARGET_STB_EXTEND -DTARGET_V3D -DTARGET_XCORE")
 fi
 
+if test "$target_videoplatform" = "target_edision" ; then
+  AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_STB -DTARGET_STB_EXTEND -DTARGET_V3D -DTARGET_EDISION")
+fi
+
 if test "$target_videoplatform" = "target_v3dnxpl" ; then
   AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_STB -DTARGET_STB_EXTEND -DTARGET_V3D -DTARGET_V3DNXPL")
 fi
diff --git a/xbmc/utils/CPUInfo.cpp b/xbmc/utils/CPUInfo.cpp
index d63f05a..859abf0 100644
--- a/xbmc/utils/CPUInfo.cpp
+++ b/xbmc/utils/CPUInfo.cpp
@@ -272,6 +272,8 @@ CCPUInfo::CCPUInfo(void)
     m_fProcTemperature = fopen("/sys/class/hwmon/hwmon0/temp1_input", "r");
   if (m_fProcTemperature == NULL)   
     m_fProcTemperature = fopen("/sys/class/thermal/thermal_zone0/temp", "r");  // On Raspberry PIs
+  if (m_fProcTemperature == NULL)
+    m_fProcTemperature = fopen("/proc/stb/fp/temp_sensor_avs", "r"); // On STBs
 
   m_fCPUFreq = fopen ("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq", "r");
   
@@ -676,7 +678,9 @@ bool CCPUInfo::getTemperature(CTemperature& temperature)
     if (!ret)
     {
       ret = fscanf(m_fProcTemperature, "%d", &value);
+#if !defined(TARGET_EDISION)
       value = value / 1000;
+#endif
       scale = 'c';
       ret++;
     }
diff --git a/xbmc/windowing/egl/EGLNativeTypeEdision.cpp b/xbmc/windowing/egl/EGLNativeTypeEdision.cpp
new file mode 100644
index 0000000..5277e50
--- /dev/null
+++ b/xbmc/windowing/egl/EGLNativeTypeEdision.cpp
@@ -0,0 +1,176 @@
+/*
+ *      Copyright (C) 2011-2012 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+#include <EGL/egl.h>
+
+#include "system.h"
+#include "EGLNativeTypeEdision.h"
+#include "utils/StringUtils.h"
+#include "utils/log.h"
+#include "guilib/gui3d.h"
+#include "linux/DllBCM.h"
+
+bool CEGLNativeTypeV3D::CheckCompatibility()
+{
+  return true;
+}
+
+void CEGLNativeTypeV3D::Initialize()
+{
+}
+
+void CEGLNativeTypeV3D::Destroy()
+{
+}
+
+bool CEGLNativeTypeV3D::CreateNativeDisplay()
+{
+  m_nativeDisplay = EGL_DEFAULT_DISPLAY;
+  return true;
+}
+
+bool CEGLNativeTypeV3D::CreateNativeWindow()
+{
+  V3D_RegisterDisplayPlatform(&m_platformHandle, m_nativeDisplay);
+  if (!m_platformHandle)
+    return false;
+
+  V3D_NativeWindowInfo info;
+
+  info.x = 0;
+  info.y = 0;
+  info.width = 1280;
+  info.height = 720;
+  info.stretch = false;
+  info.clientID = 0;
+  info.zOrder = 0;
+
+  m_nativeWindow = V3D_CreateNativeWindow(&info);
+  if (!m_nativeWindow)
+    return false;
+
+  return true;
+}
+
+bool CEGLNativeTypeV3D::GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const
+{
+  *nativeDisplay = (XBNativeDisplayType*) &m_nativeDisplay;
+  return true;
+}
+
+bool CEGLNativeTypeV3D::GetNativeWindow(XBNativeWindowType **nativeWindow) const
+{
+  *nativeWindow = (XBNativeWindowType*) &m_nativeWindow;
+  return true;
+}
+
+bool CEGLNativeTypeV3D::DestroyNativeDisplay()
+{
+  m_nativeDisplay = 0;
+  return true;
+}
+
+bool CEGLNativeTypeV3D::DestroyNativeWindow()
+{
+  V3D_DestroyNativeWindow(m_nativeWindow);
+  m_nativeWindow = 0;
+
+  V3D_UnregisterDisplayPlatform(m_platformHandle);
+  return true;
+}
+
+bool CEGLNativeTypeV3D::GetNativeResolution(RESOLUTION_INFO *res) const
+{
+  *res = m_desktopRes;
+  return true;
+}
+
+bool CEGLNativeTypeV3D::SetNativeResolution(const RESOLUTION_INFO &res)
+{
+  m_desktopRes = res;
+  return true;
+}
+
+bool CEGLNativeTypeV3D::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
+{
+  resolutions.clear();
+
+  m_desktopResAll[0].iScreen      = 0;
+  m_desktopResAll[0].bFullScreen  = true;
+  m_desktopResAll[0].iWidth       = 1280;
+  m_desktopResAll[0].iHeight      = 720;
+  m_desktopResAll[0].iScreenWidth = 1280;
+  m_desktopResAll[0].iScreenHeight= 720;
+  m_desktopResAll[0].dwFlags      = D3DPRESENTFLAG_PROGRESSIVE;
+  m_desktopResAll[0].fRefreshRate = 50;
+  m_desktopResAll[0].strMode = StringUtils::Format("%dx%d", 1280, 720);
+  m_desktopResAll[0].strMode = StringUtils::Format("%s @ %.2f%s - Full Screen", m_desktopRes.strMode.c_str(), 50., "");
+  m_desktopResAll[0].iSubtitles   = static_cast<int>(0.965 * m_desktopResAll[0].iHeight);
+
+  CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s\n", m_desktopResAll[0].strMode.c_str());
+
+  resolutions.push_back(m_desktopResAll[0]);
+
+  m_desktopResAll[1].iScreen      = 0;
+  m_desktopResAll[1].bFullScreen  = true;
+  m_desktopResAll[1].iWidth       = 1280;
+  m_desktopResAll[1].iHeight      = 720;
+  m_desktopResAll[1].iScreenWidth = 1280;
+  m_desktopResAll[1].iScreenHeight= 720;
+  m_desktopResAll[1].dwFlags      = D3DPRESENTFLAG_PROGRESSIVE | D3DPRESENTFLAG_MODE3DSBS;
+  m_desktopResAll[1].fRefreshRate = 50;
+  m_desktopResAll[1].strMode = StringUtils::Format("%dx%d", 1280, 720);
+  m_desktopResAll[1].strMode = StringUtils::Format("%s @ %.2f%s - Full Screen 3DSBS", m_desktopResAll[1].strMode.c_str(), 50., "");
+  m_desktopResAll[1].iSubtitles   = static_cast<int>(0.965 * m_desktopResAll[1].iHeight);
+
+  CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s\n", m_desktopResAll[1].strMode.c_str());
+
+  resolutions.push_back(m_desktopResAll[1]);
+
+  m_desktopResAll[2].iScreen      = 0;
+  m_desktopResAll[2].bFullScreen  = true;
+  m_desktopResAll[2].iWidth       = 1280;
+  m_desktopResAll[2].iHeight      = 720;
+  m_desktopResAll[2].iScreenWidth = 1280;
+  m_desktopResAll[2].iScreenHeight= 720;
+  m_desktopResAll[2].dwFlags      = D3DPRESENTFLAG_PROGRESSIVE | D3DPRESENTFLAG_MODE3DTB;
+  m_desktopResAll[2].fRefreshRate = 50;
+  m_desktopResAll[2].strMode = StringUtils::Format("%dx%d", 1280, 720);
+  m_desktopResAll[2].strMode = StringUtils::Format("%s @ %.2f%s - Full Screen 3DTB", m_desktopResAll[2].strMode.c_str(), 50., "");
+  m_desktopResAll[2].iSubtitles   = static_cast<int>(0.965 * m_desktopResAll[2].iHeight);
+
+  CLog::Log(LOGDEBUG, "EGL initial desktop resolution %s\n", m_desktopResAll[2].strMode.c_str());
+
+  resolutions.push_back(m_desktopResAll[2]);
+
+  m_desktopRes = m_desktopResAll[0];
+
+  return true;
+}
+
+bool CEGLNativeTypeV3D::GetPreferredResolution(RESOLUTION_INFO *res) const
+{
+  *res = m_desktopResAll[0];
+  return true;
+}
+
+bool CEGLNativeTypeV3D::ShowWindow(bool show)
+{
+  return V3D_SetVisible(m_platformHandle, show);
+}
diff --git a/xbmc/windowing/egl/EGLNativeTypeEdision.h b/xbmc/windowing/egl/EGLNativeTypeEdision.h
new file mode 100644
index 0000000..c3b7624
--- /dev/null
+++ b/xbmc/windowing/egl/EGLNativeTypeEdision.h
@@ -0,0 +1,61 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2011-2012 Team XBMC
+ *      http://www.xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <vector>
+#include <string>
+#include <v3dplatform.h>
+
+#include "EGLNativeType.h"
+
+class CEGLNativeTypeV3D : public CEGLNativeType
+{
+public:
+  CEGLNativeTypeV3D() : m_platformHandle(0) {
+    m_nativeDisplay = 0;
+    m_nativeWindow = 0;
+  }
+  virtual ~CEGLNativeTypeV3D() {};
+  virtual std::string GetNativeName() const { return "V3D"; };
+  virtual bool  CheckCompatibility();
+  virtual void  Initialize();
+  virtual void  Destroy();
+  virtual int   GetQuirks() { return EGL_QUIRK_NONE; };
+
+  virtual bool  CreateNativeDisplay();
+  virtual bool  CreateNativeWindow();
+  virtual bool  GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const;
+  virtual bool  GetNativeWindow(XBNativeWindowType **nativeWindow) const;
+
+  virtual bool  DestroyNativeWindow();
+  virtual bool  DestroyNativeDisplay();
+
+  virtual bool  GetNativeResolution(RESOLUTION_INFO *res) const;
+  virtual bool  SetNativeResolution(const RESOLUTION_INFO &res);
+  virtual bool  ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions);
+  virtual bool  GetPreferredResolution(RESOLUTION_INFO *res) const;
+
+  virtual bool  ShowWindow(bool show);
+private:
+  RESOLUTION_INFO m_desktopRes;
+  RESOLUTION_INFO m_desktopResAll[3];
+  V3D_PlatformHandle m_platformHandle;
+};
diff --git a/xbmc/windowing/egl/EGLWrapper.cpp b/xbmc/windowing/egl/EGLWrapper.cpp
index 5510257..98386e9 100644
--- a/xbmc/windowing/egl/EGLWrapper.cpp
+++ b/xbmc/windowing/egl/EGLWrapper.cpp
@@ -46,6 +46,9 @@
 #if defined(TARGET_XCORE)
   #include "EGLNativeTypeV3D.h"
 #endif
+#if defined(TARGET_EDISION)
+  #include "EGLNativeTypeEdision.h"
+#endif
 #if defined(TARGET_VUPLUS)
   #include "EGLNativeTypeVuplus.h"
 #endif
@@ -128,6 +131,8 @@ bool CEGLWrapper::Initialize(const std::string &implementation)
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeV3D>(implementation))
 #elif defined(TARGET_XCORE)
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeV3D>(implementation))
+#elif defined(TARGET_EDISION)
+      (nativeGuess = CreateEGLNativeType<CEGLNativeTypeV3D>(implementation))
 #elif defined(TARGET_VUPLUS)
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeVuplus>(implementation))
 #elif defined(TARGET_NEXTV)
diff --git a/xbmc/windowing/egl/Makefile.in b/xbmc/windowing/egl/Makefile.in
index dbfaa9f..065c2f1 100644
--- a/xbmc/windowing/egl/Makefile.in
+++ b/xbmc/windowing/egl/Makefile.in
@@ -18,6 +18,9 @@ endif
 ifeq (@USE_XCORE@,1)
 SRCS+= EGLNativeTypeV3D.cpp
 endif
+ifeq (@USE_EDISION@,1)
+SRCS+= EGLNativeTypeEdision.cpp
+endif
 ifeq (@USE_DREAMBOX@,1)
 SRCS+= EGLNativeTypeDreambox.cpp
 endif
diff --git a/xbmc/windowing/egl/WinSystemEGL.cpp b/xbmc/windowing/egl/WinSystemEGL.cpp
index 852f337..bfc8290 100644
--- a/xbmc/windowing/egl/WinSystemEGL.cpp
+++ b/xbmc/windowing/egl/WinSystemEGL.cpp
@@ -119,8 +119,8 @@ bool CWinSystemEGL::InitWindowSystem()
         EGL_ALPHA_SIZE,      8,
         EGL_DEPTH_SIZE,     16,
         EGL_STENCIL_SIZE,    0,
-        EGL_SAMPLE_BUFFERS,  0,
-        EGL_SAMPLES,         0,
+        EGL_SAMPLE_BUFFERS,  1,
+        EGL_SAMPLES,         4,
         EGL_SURFACE_TYPE,    surface_type,
         EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,
         EGL_NONE
-- 
2.7.4

