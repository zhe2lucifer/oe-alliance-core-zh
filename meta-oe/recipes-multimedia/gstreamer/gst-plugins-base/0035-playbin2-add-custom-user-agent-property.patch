From 449a42350d233e83290b4ca6bb397b4e39cfe50c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ren=C3=A9=20Stadler?= <rene.stadler@nokia.com>
Date: Thu, 16 Jun 2011 14:19:53 +0300
Subject: [PATCH] playbin2: add custom user-agent property

---
 gst/playback/gstplaybin2.c |   37 +++++++++++++++++++++++++++++++++++++
 1 files changed, 37 insertions(+), 0 deletions(-)

diff --git a/gst/playback/gstplaybin2.c b/gst/playback/gstplaybin2.c
index 5f0f964..8f59d18 100644
--- a/gst/playback/gstplaybin2.c	2015-01-05 22:25:45.000000000 +0100
+++ b/gst/playback/gstplaybin2.c.patched	2015-01-06 00:34:40.000000000 +0100
@@ -437,6 +437,7 @@
   } duration[5];                /* cached durations */
 
   guint64 ring_buffer_max_size; /* 0 means disabled */
+  gchar *user_agent;
 };
 
 struct _GstPlayBinClass
@@ -525,6 +526,7 @@
   PROP_AV_OFFSET,
   PROP_RING_BUFFER_MAX_SIZE,
   PROP_FORCE_ASPECT_RATIO,
+  PROP_USER_AGENT,
   PROP_LAST
 };
 
@@ -891,6 +893,21 @@
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
   /**
+   * GstPlayBin2:user-agent
+   *
+   * User agent string. Isource element has a string property
+   * named "user-agent" f a as well, playbin2 will set its value to this
+   * string if set.
+   *
+   * This allows an application to conveniently override e.g. the
+   * User-Agent header field for HTTP and RTSP protocol requests.
+   */
+  g_object_class_install_property (gobject_klass, PROP_USER_AGENT,
+      g_param_spec_string ("user-agent", "User Agent",
+          "User agent (for HTTP/RTSP/MMS)", NULL,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
+  /**
    * GstPlayBin2::about-to-finish
    * @playbin: a #GstPlayBin2
    *
@@ -1432,6 +1449,8 @@
   if (playbin->elements)
     gst_plugin_feature_list_free (playbin->elements);
 
+  g_free (playbin->user_agent);
+
   g_static_rec_mutex_free (&playbin->lock);
   g_mutex_free (playbin->dyn_lock);
   g_mutex_free (playbin->elements_lock);
@@ -2142,6 +2161,10 @@
       g_object_set (playbin->playsink, "force-aspect-ratio",
           g_value_get_boolean (value), NULL);
       break;
+    case PROP_USER_AGENT:
+      g_free (playbin->user_agent);
+      playbin->user_agent = g_value_dup_string (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -2317,6 +2340,9 @@
     case PROP_RING_BUFFER_MAX_SIZE:
       g_value_set_uint64 (value, playbin->ring_buffer_max_size);
       break;
+    case PROP_USER_AGENT:
+      g_value_set_string (value, playbin->user_agent);
+      break;
     case PROP_FORCE_ASPECT_RATIO:{
       gboolean v;
 
@@ -3726,6 +3752,18 @@
   playbin->source = source;
   GST_OBJECT_UNLOCK (playbin);
 
+  if (source && playbin->user_agent) {
+    GObjectClass *klass = G_OBJECT_GET_CLASS (source);
+    GParamSpec *pspec;
+
+    pspec = g_object_class_find_property (klass, "user-agent");
+    if (pspec && G_PARAM_SPEC_TYPE (pspec) == G_TYPE_PARAM_STRING) {
+      GST_DEBUG_OBJECT (playbin, "setting source user-agent to: %s",
+          playbin->user_agent);
+      g_object_set (source, "user-agent", playbin->user_agent, NULL);
+    }
+  }
+
   g_object_notify (G_OBJECT (playbin), "source");
 
   g_signal_emit (playbin, gst_play_bin_signals[SIGNAL_SOURCE_SETUP],
 